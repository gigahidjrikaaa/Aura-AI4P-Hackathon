'use client';

import { IEntry } from '@/types/entry';

interface DataExportToolsProps {
  entries: IEntry[];
}

export default function DataExportTools({ entries }: DataExportToolsProps) {
  const exportToCSV = () => {
    const csvContent = [
      ['Date', 'Mood', 'Energy', 'Note', 'Tags'],
      ...entries.map(entry => [
        new Date(entry.date).toISOString().split('T')[0],
        entry.mood.toString(),
        entry.energy.toString(),
        `"${entry.note.replace(/"/g, '""')}"`,
        `"${entry.tags.join(', ')}"`
      ])
    ].map(row => row.join(',')).join('\n');
    
    const blob = new Blob([csvContent], { type: 'text/csv' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `aura-data-${new Date().toISOString().split('T')[0]}.csv`;
    a.click();
    URL.revokeObjectURL(url);
  };

  const exportToJSON = () => {
    const jsonContent = JSON.stringify({
      exportDate: new Date().toISOString(),
      totalEntries: entries.length,
      dateRange: {
        from: entries[entries.length - 1]?.date,
        to: entries[0]?.date
      },
      entries: entries
    }, null, 2);
    
    const blob = new Blob([jsonContent], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `aura-backup-${new Date().toISOString().split('T')[0]}.json`;
    a.click();
    URL.revokeObjectURL(url);
  };

  const generateSummaryReport = () => {
    const moods = entries.map(e => e.mood);
    const energies = entries.map(e => e.energy);
    const avgMood = moods.reduce((a, b) => a + b, 0) / moods.length;
    const avgEnergy = energies.reduce((a, b) => a + b, 0) / energies.length;
    
    const report = `
AURA WELLNESS REPORT
Generated: ${new Date().toLocaleDateString()}
Period: ${entries.length} days of data

SUMMARY STATISTICS
Average Mood: ${avgMood.toFixed(1)}/10
Average Energy: ${avgEnergy.toFixed(1)}/10
Total Check-ins: ${entries.length}

TOP TAGS
${Object.entries(
  entries.flatMap(e => e.tags).reduce((acc: {[key: string]: number}, tag) => {
    acc[tag] = (acc[tag] || 0) + 1;
    return acc;
  }, {})
)
.sort(([,a], [,b]) => (b as number) - (a as number))
.slice(0, 5)
.map(([tag, count]) => `â€¢ ${tag}: ${count} times`)
.join('\n')}

This report was generated by Aura - Your Emotional Intelligence Companion
`;

    const blob = new Blob([report], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `aura-report-${new Date().toISOString().split('T')[0]}.txt`;
    a.click();
    URL.revokeObjectURL(url);
  };

  return (
    <div className="glass p-6 rounded-xl glow-soft">
      <h3 className="text-lg font-medium text-[var(--color-accent)] mb-4 flex items-center">
        <span className="mr-2">ðŸ“Š</span>
        Data Export & Backup
      </h3>
      
      <div className="grid md:grid-cols-3 gap-4">
        <button
          onClick={exportToCSV}
          className="glass p-4 rounded-lg hover:bg-[var(--color-surface)] transition-colors text-center"
        >
          <div className="text-2xl mb-2">ðŸ“ˆ</div>
          <div className="font-medium text-sm">Export CSV</div>
          <div className="text-xs text-[var(--color-text-secondary)] mt-1">
            For spreadsheet analysis
          </div>
        </button>
        
        <button
          onClick={exportToJSON}
          className="glass p-4 rounded-lg hover:bg-[var(--color-surface)] transition-colors text-center"
        >
          <div className="text-2xl mb-2">ðŸ’¾</div>
          <div className="font-medium text-sm">Backup JSON</div>
          <div className="text-xs text-[var(--color-text-secondary)] mt-1">
            Complete data backup
          </div>
        </button>
        
        <button
          onClick={generateSummaryReport}
          className="glass p-4 rounded-lg hover:bg-[var(--color-surface)] transition-colors text-center"
        >
          <div className="text-2xl mb-2">ðŸ“„</div>
          <div className="font-medium text-sm">Summary Report</div>
          <div className="text-xs text-[var(--color-text-secondary)] mt-1">
            Human-readable summary
          </div>
        </button>
      </div>
      
      <div className="mt-4 p-3 bg-[var(--color-accent)] bg-opacity-5 rounded-lg">
        <p className="text-xs text-[var(--color-text-secondary)]">
          <strong>Privacy Note:</strong> All exports are generated locally in your browser. 
          No data is sent to external servers.
        </p>
      </div>
    </div>
  );
}